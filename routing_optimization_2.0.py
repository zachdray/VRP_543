# -*- coding: utf-8 -*-
"""Routing_Optimization_2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RVTW5OuSoYJmCj5JeooTfW0ovHiOQgm

## **Initialization**
"""

!pip install pandas
!pip instal numpy
!pip install matplotlib
!pip install seaborn
!pip install folium
!pip install plotly
!pip install osmnx
!pip install networkx
!pip install ortools
!pip install geopy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
import plotly.express as px
import osmnx as ox
import networkx as nx
from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2
from geopy.distance import geodesic
import math
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import random

"""## Loading Data


"""

# Load the data
data_stores = 'https://raw.githubusercontent.com/zachdray/VRP_543/refs/heads/main/Ain_rhone_lat_long.csv'
dtf = pd.read_csv(data_stores, sep = ";")

# Rename the index column to 'id' and fix the column names
dtf = dtf.reset_index().rename(columns={"index": "id", "lat": "Latitude", "lng": "Longitude"})

# Display the total number of rows and the first 3 rows
print("total", len(dtf))
print(dtf.head(3))

data = dtf.copy()
data["color"]=''
data.loc[data['id']==0 , 'color'] = 'red'
data.loc[data['id']!=0 , 'color'] = 'black'
start=data[data["id"]==0][["Latitude","Longitude"]].values[0]
data.head(3)

print("starting point:" , start)

map = folium.Map(location=start, tiles= "cartodbpositron", zoom_start=12)
data.apply(lambda row:
    folium.CircleMarker(
        location=[row["Latitude"], row["Longitude"]],
        color=row["color"], fill = True, radius=5).add_to(map), axis=1)

map

"""## Distance Matrix"""

# Initialize an empty distance matrix
n_nodes = len(data)
distance_matrix = np.zeros((n_nodes, n_nodes), dtype=int)  # Ensure the matrix is integer type

# Populate the distance matrix
for i, origin in data.iterrows():
    for j, destination in data.iterrows():
        if i != j:
            origin_coords = (origin["Latitude"], origin["Longitude"])
            destination_coords = (destination["Latitude"], destination["Longitude"])
            # Calculate distance in meters, convert to integer
            distance_matrix[i, j] = int(geodesic(origin_coords, destination_coords).meters)

# Convert the matrix to a nested list format
distance_matrix = distance_matrix.tolist()

# Create a dictionary to hold the matrix
result = {"distance_matrix": distance_matrix}

# Print a few rows for verification
print("Distance matrix:")
for row in result["distance_matrix"][:10]:  # Print first 10 rows
    print(row)

"""##Model"""

# Assuming you have already extracted the demands as shown in your example
demands = dtf["demand"].tolist()
demands = [int(d) for d in demands if str(d).isdigit()]
# Compute the sum of the demands
total_demand = sum(demands)

# Define the vehicle capacity
vehicle_capacity = 33

# Calculate the estimated number of vehicles needed
estimated_vehicles = int((total_demand / vehicle_capacity)+3) # add 3 vehicules for securtity

# Display the total demand, estimated vehicles, and the first few demands
print("total_demand:", total_demand)
print("estimated_vehicles:", estimated_vehicles)

# Create the data model
def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data["distance_matrix"] = distance_matrix
    data["demands"] = demands
    data["vehicle_capacities"] = [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33]
    data["num_vehicles"] = 25
    data["depot"] = 0  # Assuming the first location is the depot
    return data

def print_solution(data, manager, routing, solution):
    """Prints solution on console and stores routes in a dictionary."""
    print(f"Objective: {solution.ObjectiveValue()}")
    total_distance = 0
    total_load = 0
    routes = {}  # Initialize the routes dictionary

    for vehicle_id in range(data["num_vehicles"]):
        index = routing.Start(vehicle_id)
        route = []  # Initialize the route for the current vehicle
        route_distance = 0
        route_load = 0

        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data["demands"][node_index]
            route.append(node_index)  # Add the node to the route
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)

        route.append(manager.IndexToNode(index))  # Add the end node (depot) to the route
        routes[vehicle_id] = route  # Store the route in the dictionary

        # Print the route details
        print(f"Route for vehicle {vehicle_id}: {route}")
        print(f"Distance of the route: {route_distance}m")
        print(f"Load of the route: {route_load}\n")

        total_distance += route_distance
        total_load += route_load

    print(f"Total distance of all routes: {total_distance}m")
    print(f"Total load of all routes: {total_load}")

    return routes  # Return the routes dictionary


def main():
    """Solve the CVRP problem."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(
        len(data["distance_matrix"]), data["num_vehicles"], data["depot"]
    )

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    # Create and register a transit callback.
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data["distance_matrix"][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Capacity constraint.
    def demand_callback(from_index):
        """Returns the demand of the node."""
        from_node = manager.IndexToNode(from_index)
        return data["demands"][from_node]



    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data["vehicle_capacities"],  # vehicle maximum capacities
        True,  # start cumul to zero
        "Capacity",
    )

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
    )
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
    )
    search_parameters.time_limit.FromSeconds(1)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console and store routes.
    if solution:
        routes = print_solution(data, manager, routing, solution)
        print("Routes dictionary:", routes)  # Print the routes dictionary

if __name__ == "__main__":
    main()

"""## Map Visualization"""

# Initialize the map
map = folium.Map(location=start, tiles="cartodbpositron", zoom_start=12)

routes = { 0: [0, 0], 1: [0, 0], 2: [0, 0], 3: [0, 269, 183, 228, 30, 184, 106, 32, 189, 221, 156, 64, 95, 277, 313, 373, 319, 255, 144, 101, 188, 368, 194, 167, 290, 11, 342, 0], 4: [0, 266, 220, 302, 145, 392, 20, 205, 237, 203, 119, 309, 87, 134, 13, 251, 138, 157, 74, 273, 71, 357, 122, 139, 390, 129, 161, 353, 389, 355, 249, 146, 96, 243, 0], 5: [0, 85, 408, 258, 314, 107, 126, 334, 21, 403, 35, 397, 206, 148, 176, 326, 323, 204, 117, 125, 387, 191, 140, 380, 365, 172, 236, 240, 0], 6: [0, 58, 207, 170, 201, 213, 120, 187, 124, 36, 208, 31, 260, 275, 173, 239, 52, 298, 195, 219, 136, 155, 274, 116, 386, 349, 100, 262, 133, 26, 114, 338, 49, 256, 0], 7: [0, 198, 75, 169, 41, 400, 83, 316, 264, 79, 10, 211, 162, 28, 154, 350, 214, 115, 364, 215, 175, 328, 226, 0], 8: [0, 631, 588, 592, 415, 648, 469, 522, 624, 616, 652, 551, 661, 463, 488, 486, 653, 422, 550, 622, 646, 608, 560, 423, 585, 410, 581, 609, 441, 508, 507, 458, 512, 470, 0], 9: [0, 310, 168, 182, 121, 283, 329, 160, 271, 292, 23, 22, 130, 345, 305, 210, 37, 46, 94, 252, 51, 286, 270, 297, 15, 358, 391, 346, 362, 86, 311, 158, 324, 0], 10: [0, 396, 34, 103, 12, 166, 371, 16, 247, 141, 69, 165, 112, 369, 72, 196, 53, 110, 363, 9, 405, 89, 370, 19, 394, 33, 372, 404, 331, 66, 407, 147, 267, 300, 0], 11: [0, 339, 341, 295, 315, 288, 241, 77, 88, 383, 230, 59, 303, 343, 235, 105, 296, 361, 190, 131, 333, 242, 268, 291, 70, 360, 164, 193, 259, 61, 202, 180, 54, 73, 0], 12: [0, 684, 689, 687, 495, 453, 542, 618, 456, 633, 579, 569, 644, 663, 472, 615, 416, 630, 599, 540, 506, 573, 414, 613, 643, 471, 563, 559, 459, 656, 595, 419, 536, 584, 0], 13: [0, 562, 460, 642, 535, 627, 480, 649, 587, 639, 623, 409, 657, 524, 586, 444, 503, 533, 499, 555, 634, 467, 514, 583, 565, 594, 625, 612, 578, 632, 484, 647, 523, 501, 0], 14: [0, 395, 67, 82, 401, 278, 384, 137, 379, 63, 376, 177, 284, 65, 280, 399, 159, 98, 47, 238, 153, 57, 272, 332, 93, 104, 393, 250, 185, 171, 111, 50, 246, 2, 0], 15: [0, 667, 669, 504, 655, 451, 662, 433, 603, 448, 650, 554, 628, 462, 576, 516, 490, 572, 547, 557, 621, 478, 635, 641, 517, 445, 443, 591, 511, 497, 531, 475, 568, 580, 0], 16: [0, 232, 186, 48, 340, 4, 398, 68, 174, 658, 519, 496, 420, 538, 566, 466, 659, 546, 620, 431, 515, 432, 461, 424, 494, 412, 529, 510, 526, 541, 452, 525, 464, 481, 0], 17: [0, 440, 489, 97, 321, 281, 354, 18, 150, 27, 143, 217, 200, 149, 229, 163, 152, 261, 225, 374, 307, 482, 638, 610, 426, 234, 605, 450, 561, 527, 465, 626, 582, 636, 0], 18: [0, 491, 567, 473, 629, 411, 476, 606, 454, 521, 528, 457, 611, 427, 455, 607, 438, 418, 487, 570, 574, 429, 428, 437, 436, 619, 502, 577, 600, 602, 539, 483, 421, 447, 0], 19: [0, 686, 439, 677, 544, 671, 212, 253, 285, 377, 224, 312, 306, 381, 299, 413, 417, 556, 518, 558, 505, 509, 479, 614, 430, 571, 596, 597, 545, 617, 442, 564, 513, 425, 0], 20: [0, 678, 670, 680, 681, 692, 199, 336, 320, 44, 348, 359, 227, 356, 197, 248, 60, 276, 17, 289, 92, 108, 279, 127, 90, 8, 317, 5, 109, 102, 14, 55, 406, 254, 0], 21: [0, 24, 29, 257, 80, 91, 325, 181, 344, 352, 366, 99, 375, 385, 38, 7, 304, 81, 337, 84, 118, 287, 308, 142, 218, 402, 192, 3, 135, 6, 322, 179, 216, 62, 0], 22: [0, 128, 56, 263, 301, 233, 378, 222, 293, 330, 42, 231, 178, 388, 265, 209, 318, 78, 351, 282, 347, 76, 382, 25, 132, 1, 367, 327, 43, 294, 123, 39, 151, 113, 0], 23: [0, 45, 245, 673, 672, 675, 668, 651, 435, 665, 683, 676, 691, 682, 664, 674, 688, 666, 690, 500, 534, 537, 637, 548, 575, 532, 434, 498, 589, 530, 645, 477, 520, 553, 0], 24: [0, 40, 335, 223, 244, 679, 685, 492, 468, 590, 593, 446, 485, 449, 640, 604, 474, 493, 601, 543, 549, 552, 598, 654, 700, 695, 660, 698, 693, 696, 701, 697, 694, 699, 0]
         }
# Define a color palette for routes
colors = ['blue', 'green', 'red', 'purple', 'orange', 'darkblue', 'brown', 'black']

# Map vehicle IDs to random colors
color_map = {vehicle_id: random.choice(colors) for vehicle_id in routes.keys()}

# Function to add a route to the map
def add_route_to_map(route, color="blue"):
    """Adds a route to the folium map."""
    route_coords = []
    for node in route:
        lat, lng = data.iloc[node][["Latitude", "Longitude"]]
        route_coords.append((lat, lng))

    # Add PolyLine to the map to represent the route
    folium.PolyLine(locations=route_coords, color=color, weight=4.5, opacity=0.7).add_to(map)

# Sort routes by vehicle_id to ensure consistent layer order
sorted_routes = dict(sorted(routes.items()))

# Add routes to separate feature groups
for vehicle_id, route in sorted_routes.items():
    # Get coordinates for the route
    coordinates = [
        (data.loc[node, "Latitude"], data.loc[node, "Longitude"]) for node in route
    ]

    # Create a feature group for the vehicle's route
    route_group = folium.FeatureGroup(name=f"Route for Vehicle {vehicle_id}")

    # Add the route (PolyLine) to the feature group
    folium.PolyLine(
        locations=coordinates,
        color=color_map[vehicle_id],
        weight=2.5,
        opacity=0.8,
        tooltip=f"Route for Vehicle {vehicle_id}"
    ).add_to(route_group)

    # Add the nodes (CircleMarkers) to the feature group
    for node in route:
        folium.CircleMarker(
            location=[data.loc[node, "Latitude"], data.loc[node, "Longitude"]],
            color=color_map[vehicle_id],
            fill=True,
            radius=5
        ).add_to(route_group)

    # Add the feature group to the map
    route_group.add_to(map)

# Add layer control to toggle routes
folium.LayerControl().add_to(map)

# Display the map
map

#routes =  {0: [0, 269, 228, 30, 184, 106, 32, 189, 221, 156, 64, 95, 277, 313, 373, 319, 255, 144, 101, 188, 290, 11, 342, 0], 1: [0, 266, 220, 302, 145, 392, 20, 205, 237, 203, 119, 309, 87, 134, 13, 251, 138, 157, 74, 273, 71, 357, 122, 139, 390, 129, 161, 353, 389, 355, 249, 146, 96, 243, 0], 2: [0, 408, 258, 314, 107, 126, 334, 21, 403, 35, 397, 206, 148, 176, 326, 323, 204, 117, 125, 387, 191, 140, 380, 172, 236, 240, 0], 3: [0, 58, 207, 170, 201, 213, 120, 187, 124, 36, 208, 31, 260, 275, 173, 239, 52, 298, 195, 219, 155, 274, 116, 386, 349, 100, 262, 133, 26, 114, 338, 0], 4: [0, 198, 167, 194, 75, 368, 169, 41, 400, 83, 183, 316, 264, 79, 10, 211, 162, 28, 154, 350, 214, 365, 115, 364, 136, 215, 175, 328, 226, 256, 49, 0], 5: [0, 631, 592, 588, 415, 648, 469, 522, 624, 616, 652, 551, 661, 463, 488, 458, 507, 486, 508, 653, 422, 550, 622, 609, 646, 581, 608, 585, 423, 560, 410, 441, 512, 470, 0], 6: [0, 85, 310, 168, 182, 271, 121, 283, 329, 160, 324, 292, 23, 22, 130, 345, 305, 210, 37, 46, 94, 252, 51, 286, 270, 297, 15, 358, 391, 346, 362, 86, 311, 158, 0], 7: [0, 396, 34, 103, 12, 166, 371, 16, 247, 141, 69, 165, 112, 369, 72, 196, 53, 110, 363, 9, 405, 89, 370, 19, 394, 33, 372, 404, 331, 66, 407, 147, 267, 300, 0], 8: [0, 339, 341, 295, 315, 288, 241, 77, 88, 383, 230, 59, 303, 343, 235, 105, 296, 361, 190, 131, 333, 242, 268, 291, 70, 360, 164, 193, 259, 61, 202, 180, 54, 73, 0], 9: [0, 684, 689, 687, 495, 453, 542, 618, 456, 633, 579, 569, 644, 663, 472, 615, 416, 630, 599, 540, 506, 573, 414, 613, 643, 471, 563, 559, 459, 656, 595, 419, 536, 584, 0], 10: [0, 562, 460, 642, 535, 627, 480, 649, 587, 639, 623, 409, 657, 524, 586, 444, 503, 533, 499, 555, 634, 467, 514, 583, 565, 594, 625, 612, 578, 632, 484, 647, 523, 501, 0], 11: [0, 395, 67, 82, 401, 278, 384, 137, 379, 63, 376, 177, 284, 65, 280, 399, 159, 98, 47, 238, 153, 57, 272, 332, 93, 104, 393, 250, 185, 171, 111, 50, 246, 2, 0], 12: [0, 667, 669, 504, 655, 451, 662, 433, 603, 448, 650, 554, 628, 462, 576, 516, 490, 572, 547, 557, 621, 478, 635, 641, 517, 445, 443, 591, 511, 497, 531, 475, 568, 580, 0], 13: [0, 232, 186, 48, 340, 4, 398, 68, 174, 658, 519, 496, 420, 538, 566, 466, 659, 546, 620, 431, 515, 432, 461, 424, 494, 412, 529, 510, 526, 541, 452, 525, 464, 481, 0], 14: [0, 440, 489, 97, 321, 281, 354, 18, 150, 27, 143, 217, 200, 149, 229, 163, 152, 261, 225, 374, 307, 482, 638, 610, 426, 234, 605, 450, 561, 527, 465, 626, 582, 636, 0], 15: [0, 491, 567, 473, 629, 411, 476, 606, 454, 521, 528, 457, 611, 427, 455, 607, 438, 418, 487, 570, 574, 429, 428, 437, 436, 619, 502, 577, 600, 602, 539, 483, 421, 447, 0], 16: [0, 686, 439, 677, 544, 671, 212, 253, 285, 377, 224, 312, 306, 381, 299, 413, 417, 556, 518, 558, 505, 509, 479, 614, 430, 571, 596, 597, 545, 617, 442, 564, 513, 425, 0], 17: [0, 678, 670, 680, 681, 692, 199, 336, 320, 44, 348, 359, 227, 356, 197, 248, 60, 276, 17, 289, 92, 108, 279, 127, 90, 8, 317, 5, 109, 102, 14, 55, 406, 254, 0], 18: [0, 24, 29, 257, 80, 91, 325, 181, 344, 352, 366, 99, 375, 385, 38, 7, 304, 81, 337, 84, 118, 287, 308, 142, 218, 402, 192, 3, 135, 6, 322, 179, 216, 62, 0], 19: [0, 128, 56, 263, 301, 233, 378, 222, 293, 330, 42, 231, 178, 388, 265, 209, 318, 78, 351, 282, 347, 76, 382, 25, 132, 1, 367, 327, 43, 294, 123, 39, 151, 113, 0], 20: [0, 45, 245, 673, 672, 675, 668, 651, 435, 665, 683, 676, 691, 682, 664, 674, 688, 666, 690, 500, 534, 537, 637, 548, 575, 532, 434, 498, 589, 530, 645, 477, 520, 553, 0], 21: [0, 40, 335, 223, 244, 679, 685, 492, 468, 590, 593, 446, 485, 449, 640, 604, 474, 493, 601, 543, 549, 552, 598, 654, 700, 695, 660, 698, 693, 696, 701, 697, 694, 699, 0]}

